package views;

/**
 * Frame to display totals charts.
 *
 * @author John D. Miller
 * @version 1.0.2
 * @since 01/06/2016
 */

import models.BarGraph;
import models.PieChart;
import models.Waste;
import utils.MonthComparator;

import java.util.LinkedHashSet;

        import java.awt.GridBagLayout;
        import java.awt.Toolkit;
        import java.util.ArrayList;
        import java.util.Collections;
        import java.util.LinkedHashSet;
        import java.util.Set;
        import javax.swing.JFrame;

public class TotalsFrame extends javax.swing.JFrame {

    ArrayList<String> dates = new ArrayList<>();
    ArrayList<Waste> periodList = new ArrayList<>();
    ArrayList<Waste> monthlyTotals = new ArrayList<>();
    ArrayList<Waste> yearlyTotals = new ArrayList<>();
    ArrayList<Waste> historicalTotals = new ArrayList<>();
    Set<String> set;

    /**
     * Creates new form TotalsFrame
     *
     * @param monthlyTotals the monthly totals.
     * @param yearlyTotals the yearly totals.
     * @param historicalTotals the historical totals.
     */
    public TotalsFrame(ArrayList<Waste> monthlyTotals, ArrayList<Waste> yearlyTotals, ArrayList<Waste> historicalTotals) {
        // Creating components
        initComponents();
        this.monthlyTotals = monthlyTotals;
        this.yearlyTotals = yearlyTotals;
        this.historicalTotals = historicalTotals;

        // Configuring journalFrame
        setTitle("Your Totals");
        setResizable(false);
        chartPanel.setLayout(new GridBagLayout());
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        setAlwaysOnTop(true);
//        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("recycle.png")));
        periodTypeComboBox.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        chartTypeButtonGroup = new javax.swing.ButtonGroup();
        chartPanel = new javax.swing.JPanel();
        optionPanel = new javax.swing.JPanel();
        periodComboBox = new javax.swing.JComboBox();
        periodTypeComboBox = new javax.swing.JComboBox();
        periodLabel = new javax.swing.JLabel();
        unitLabel = new javax.swing.JLabel();
        pieChartRadioButton = new javax.swing.JRadioButton();
        barGraphRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chartPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
                chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
                chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 423, Short.MAX_VALUE)
        );

        optionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Graph Options"));

        periodComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodComboBoxActionPerformed(evt);
            }
        });

        periodTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Monthly", "Yearly", "Historical" }));
        periodTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                periodTypeComboBoxActionPerformed(evt);
            }
        });

        periodLabel.setText("Period:");

        unitLabel.setText("Week:");

        chartTypeButtonGroup.add(pieChartRadioButton);
        pieChartRadioButton.setSelected(true);
        pieChartRadioButton.setText("Pie Chart");
        pieChartRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pieChartRadioButtonActionPerformed(evt);
            }
        });

        chartTypeButtonGroup.add(barGraphRadioButton);
        barGraphRadioButton.setText("Bar Graph");
        barGraphRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barGraphRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionPanelLayout = new javax.swing.GroupLayout(optionPanel);
        optionPanel.setLayout(optionPanelLayout);
        optionPanelLayout.setHorizontalGroup(
                optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(optionPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(periodLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(periodTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                                .addComponent(unitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(periodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(pieChartRadioButton)
                                .addGap(49, 49, 49)
                                .addComponent(barGraphRadioButton)
                                .addContainerGap())
        );
        optionPanelLayout.setVerticalGroup(
                optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(optionPanelLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(optionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(periodTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(periodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(periodLabel)
                                        .addComponent(unitLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(pieChartRadioButton)
                                        .addComponent(barGraphRadioButton)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(optionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(optionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    /**
     * Creates a chart based on selected period.
     */
    private void createChart() {
        // Preparing...
        String selectedDate = periodComboBox.getSelectedItem().toString();
        String selectedPeriod = periodComboBox.getSelectedItem().toString();
        String periodType = periodTypeComboBox.getSelectedItem().toString();
        periodList = new ArrayList<>();
        PieChart chart;

        switch (periodType) {
            case "Monthly":
                // Configuring panel
                chartPanel.removeAll();
                chartPanel.revalidate();

                // Gathering data
                periodList = new ArrayList<>();
                monthlyTotals.stream().filter((w) -> (w.getDate().equals(selectedDate))).forEach((w) -> {
                    periodList.add(w);
                });

                // Creating chart
                if (pieChartRadioButton.isSelected()) {
                    chart = new PieChart(selectedPeriod + " Totals", periodList);
                    chartPanel.add(chart.getContentPane());
                    chart.pack();
                } else if (barGraphRadioButton.isSelected()) {
                    BarGraph bg = new BarGraph("", selectedPeriod + " Totals", periodList);
                    chartPanel.add(bg.getContentPane());
                    bg.pack();
                }

                // Displaying
                chartPanel.repaint();
                break;
            case "Yearly":
                // Configuring panel
                chartPanel.removeAll();
                chartPanel.revalidate();

                // Gathering data
                periodList = new ArrayList<>();
                yearlyTotals.stream().filter((w) -> (w.getDate().equals(selectedDate))).forEach((w) -> {
                    periodList.add(w);
                });

                // Creating chart
                if (pieChartRadioButton.isSelected()) {
                    chart = new PieChart(selectedPeriod + " Totals", periodList);
                    chartPanel.add(chart.getContentPane());
                    chart.pack();
                } else if (barGraphRadioButton.isSelected()) {
                    BarGraph bg = new BarGraph("", selectedPeriod + " Totals", periodList);
                    chartPanel.add(bg.getContentPane());
                    bg.pack();
                }

                // Displaying
                chartPanel.repaint();
                break;
            case "Historical":
                // Configuring panel
                chartPanel.removeAll();
                chartPanel.revalidate();

                // Creating chart
                if (pieChartRadioButton.isSelected()) {
                    chart = new PieChart("Historical Totals", historicalTotals);
                    chartPanel.add(chart.getContentPane());
                    chart.pack();
                } else if (barGraphRadioButton.isSelected()) {
                    BarGraph bg = new BarGraph("", "Historical Totals", historicalTotals);
                    chartPanel.add(bg.getContentPane());
                    bg.pack();
                }

                // Displaying
                chartPanel.repaint();
        }
    }

    /**
     * Filling periodComboBox based on periodTypeComboBox selection.
     *
     * @param evt
     */
    private void periodTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {

        // Determining selection and filling
        switch (periodTypeComboBox.getSelectedItem().toString()) {
            case "Monthly":
                unitLabel.setText("Month:");
                dates = new ArrayList<>();

                // Adding dates
                monthlyTotals.stream().forEach((w) -> {
                    dates.add(w.getDate());
                });

                Collections.sort(dates, MonthComparator.ascending(MonthComparator.getComparator(MonthComparator.DATE_SORT)));
                Collections.reverse(dates);

                // Removing duplicate dates
                set = new LinkedHashSet<>(dates);

                // Setting model
                periodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(set.toArray()));
                periodComboBox.setEnabled(true);
                periodComboBox.setSelectedIndex(0);
                break;
            case "Yearly":
                unitLabel.setText("Year:");
                dates = new ArrayList<>();

                // Adding dates
                yearlyTotals.stream().map((w) -> {
                    dates.add(w.getDate());
                    return w;
                }).forEach((w) -> {
                    periodList.add(w);
                });
                Collections.sort(dates);
                Collections.reverse(dates);

                // Removing duplicate dates
                set = new LinkedHashSet<>(dates);

                // Setting model
                periodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(set.toArray()));
                periodComboBox.setEnabled(true);
                periodComboBox.setSelectedIndex(0);
                break;
            case "Historical":
                unitLabel.setText("");
                periodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>());
                periodComboBox.addItem("");
                periodComboBox.setEnabled(false);
                periodComboBox.setSelectedIndex(0);
                break;

            // No selection, do not fill
            default:
                periodComboBox.setModel(new javax.swing.DefaultComboBoxModel<>());
                break;
        }
    }

    private void periodComboBoxActionPerformed(java.awt.event.ActionEvent evt) {
        createChart();
    }

    private void pieChartRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createChart();
    }

    private void barGraphRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
        createChart();
    }

    // Variables declaration - do not modify
    private javax.swing.JRadioButton barGraphRadioButton;
    private javax.swing.JPanel chartPanel;
    private javax.swing.ButtonGroup chartTypeButtonGroup;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JComboBox periodComboBox;
    private javax.swing.JLabel periodLabel;
    private javax.swing.JComboBox periodTypeComboBox;
    private javax.swing.JRadioButton pieChartRadioButton;
    private javax.swing.JLabel unitLabel;
    // End of variables declaration
}